#!/bin/sh
. "$(dirname $0)"/common
. "$ETC_PATH"/config

########################################################################################################################
# DEFAULTS
########################################################################################################################
current_dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
current_timestamp=$(date +"%Y-%m-%d-%H-%M-%S")

BACKUP_TARGET_DIR="$SHARE_PATH"/backup
GITLAB_DIR="$SHARE_PATH"/gitlab
GITLAB_PACKAGE_CONTROL="$current_dir"/start-stop-status
MYSQL10_BIN_DIR="$(dirname -- "$MYSQL10_BIN")"

gitlab_database=$DB_NAME
gitlab_database_user=$DB_USER
gitlab_database_password=$DB_PASS
postgresql=0
maria_db_root_password=

########################################################################################################################
# Prepare
########################################################################################################################
if ! [ -d "$BACKUP_TARGET_DIR" ]; then
  mkdir -p $BACKUP_TARGET_DIR
fi

########################################################################################################################
# The command line help
########################################################################################################################
display_help() {
    echo "Usage: $0 [option...]" >&2
    echo
    echo "   --maria-db-root-password   MariaDB root password. *required'"
    echo "   --backup-target-dir        Target directory for the compressed backup file. default: $BACKUP_TARGET_DIR"
    echo "   --gitlab-dir               GitLab installation directory. default: $GITLAB_DIR"
    echo "   --gitlab-database          GitLab database name. default: $gitlab_database"
    echo "   --gitlab-database-user     GitLab database username. default: $gitlab_database_user"
    echo "   --postgresql               compatibility"
    echo
    # echo some stuff here for the -a or --add-options
    exit 1
}

########################################################################################################################
# PARAMETER HANDLING
########################################################################################################################
while [ $# -ge 1 ]; do
    case "$1" in
        --maria-db-root-password)
            maria_db_root_password="$2"; shift 2
            if ! [ -z "$maria_db_root_password" ]; then
                MARIADB_PASS="${maria_db_root_password:+-p$maria_db_root_password}"
                if [ "$($MYSQL10_BIN_DIR/mysqladmin ping "$MARIADB_PASS")" != "mysqld is alive" ]; then
                    exit 1
                fi
            fi
        ;;
        --backup-target-dir)
            BACKUP_TARGET_DIR="$2"; shift 2
            if ! [ -d $BACKUP_TARGET_DIR ]; then
                mkdir -p $BACKUP_TARGET_DIR
            fi
        ;;
        --gitlab-dir)
            GITLAB_DIR="$2"; shift 2
            if ! [ -d $GITLAB_DIR ]; then
                echo "--gitlab-dir $GITLAB_DIR not found!"
                exit 1
            fi
        ;;
        --gitlab-database)
            gitlab_database="$2"; shift 2
        ;;
        --gitlab-database-user)
            gitlab_database_user="$2"; shift 2
        ;;
        --postgresql)
            postgresql=1; shift
        ;;
        -h | --help)
            display_help  # Call your function
            exit 0
        ;;
        --) # End of all options
            shift
            break
        ;;
        -*)
            echo "Error: Unknown option: $1" >&2
            ## or call function display_help
            exit 1
        ;;
        *)  # No more options
            break
        ;;
    esac
done

########################################################################################################################
# VALIDATE PARAMETER DEPENDENCIES
########################################################################################################################
if [ -z "$maria_db_root_password" ]; then
    echo "--maria-db-root-password is not set!"
    exit 1
fi

# db exists?
RESULT=$($MYSQL10_BIN_DIR/mysqlshow --user=root --password=$maria_db_root_password $gitlab_database | grep -v Wildcard | grep -o $gitlab_database)
if ! [ "$RESULT" == "$gitlab_database" ]; then
    exit 1
fi

# db user exists?
RESULT=$($MYSQL10_BIN_DIR/mysql $gitlab_database -u root -p"$maria_db_root_password" -se "select distinct user from mysql.user where user='$gitlab_database_user'" | grep -v Wildcard | grep -o $gitlab_database_user)
if ! [ "$RESULT" == "$gitlab_database_user" ]; then
    echo "db user $gitlab_database_user does not exists!"
    exit 1
fi

########################################################################################################################
# STOP SYNOLOGY PACKAGE
########################################################################################################################
echo "stopping GitLab"
x=$($GITLAB_PACKAGE_CONTROL stop 2> /dev/null)

########################################################################################################################
# BACKUP
########################################################################################################################
echo "backup config"
config_file_list="synology_gitlab synology_gitlab_redis"
x=$(/usr/syno/bin/synowebapi --exec api=SYNO.Docker.Container.Profile version=1 method=export outfile="$BACKUP_TARGET_DIR/synology_gitlab_redis" name=synology_gitlab_redis 2> /dev/null)
x=$(/usr/syno/bin/synowebapi --exec api=SYNO.Docker.Container.Profile version=1 method=export outfile="$BACKUP_TARGET_DIR/synology_gitlab" name=synology_gitlab 2> /dev/null)

gitlab_package_fqn=$(jq '.image' < "$BACKUP_TARGET_DIR/synology_gitlab" | tr -d '"')
gitlab_package_name=$(echo $gitlab_package_fqn | cut -f1 -d:)
gitlab_package_version=$(echo $gitlab_package_fqn | cut -f2 -d:)

if [ -f "$ETC_PATH"/config ]; then
    cp "$ETC_PATH"/config $BACKUP_TARGET_DIR"/config"
    config_file_list="$config_file_list config"
fi

if [ -f "$ETC_PATH"/config_container_ports ]; then
    cp "$ETC_PATH"/config_container_ports $BACKUP_TARGET_DIR"/config_container_ports"
    config_file_list="$config_file_list config_container_ports"
fi

if [ -f "$ETC_PATH"/config_custom ]; then
    cp "$ETC_PATH"/config_custom $BACKUP_TARGET_DIR"/config_custom"
    config_file_list="$config_file_list config_custom"
fi

echo "compress gitlab folder"
tar cpfz $BACKUP_TARGET_DIR"/gitlab.tar.gz" --directory=$GITLAB_DIR .

echo "backup gitlab database"
compatibility=""
if [ $postgresql == 0 ]; then
  echo "GRANT USAGE ON *.* TO '$gitlab_database_user'@'localhost' IDENTIFIED BY 'password';" > $BACKUP_TARGET_DIR"/database.sql"
  echo "GRANT USAGE ON *.* TO '$gitlab_database_user'@'%' IDENTIFIED BY 'password';" >> $BACKUP_TARGET_DIR"/database.sql"
  echo "DROP USER '$gitlab_database_user'@'%'; DROP USER '$gitlab_database_user'@'localhost';" >> $BACKUP_TARGET_DIR"/database.sql"

  # add create & grant user sql queries
  $MYSQL10_BIN_DIR/mysql -uroot -p$maria_db_root_password -e"select concat('show grants for ','\'',user,'\'@\'',host,'\'') from mysql.user where user='$gitlab_database_user'" > user_list_with_header.txt
  sed '1d' user_list_with_header.txt > ./user.txt
  while read user; do  $MYSQL10_BIN_DIR/mysql -uroot -p$maria_db_root_password -e"$user" > user_grant.txt; sed '1d' user_grant.txt >> user_privileges.txt; echo "flush privileges" >> user_privileges.txt; done < user.txt
  awk '{print $0";"}'  user_privileges.txt >> $BACKUP_TARGET_DIR"/database.sql"
  rm user.txt user_list_with_header.txt user_grant.txt user_privileges.txt
else
  compatibility="--compatible=postgresql"
fi
# dump database
$MYSQL10_BIN_DIR/mysqldump -uroot -p$maria_db_root_password $compatibility $gitlab_database >> $BACKUP_TARGET_DIR/"database.sql"


# write a little manual so anybody can restore the backup without studying this backup script
echo "How to restore:" >> $BACKUP_TARGET_DIR"/README"
echo "1) stop gitlab" >> $BACKUP_TARGET_DIR"/README"
echo "2) import the *.config files to your stopped Docker Container (synology_gitlab && synology_gitlab_redis) DSM->Docker->Container->Settings->Import" >> $BACKUP_TARGET_DIR"/README"
echo "3) extract content of gitlab.tar.gz: tar xpfz gitlab.tar.gz -C $GITLAB_DIR" >> $BACKUP_TARGET_DIR"/README"
echo "4) restore db: mysql -u root -p < database.sql" >> $BACKUP_TARGET_DIR"/README"

suffx=""
if [ $postgresql == 1 ]; then
  suffx="postgresql-"
fi
echo "compress everything to a backup file"
tar cfz $BACKUP_TARGET_DIR/$current_timestamp"-gitlab-"$suffx$gitlab_package_version".tar.gz" --remove-files --directory="$BACKUP_TARGET_DIR" README gitlab.tar.gz database.sql $config_file_list

########################################################################################################################
# FINISH
########################################################################################################################
echo "start GitLab"
x=$($GITLAB_PACKAGE_CONTROL start 2> /dev/null)

echo "backup completed!"
