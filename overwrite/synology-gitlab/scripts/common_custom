#!/bin/bash
DOCKER_WEBAPI=/usr/syno/bin/synowebapi
DOCKER_GITLAB_CONFIG_CUSTOM="$ETC_PATH"/config_custom
DOCKER_GITLAB_CONFIG_CONTAINER_PORTS="$ETC_PATH"/config_container_ports
DOCKER_GITLAB_CONFIG_FILE=/tmp/"$GITLAB_NAME".config

#=======================================================================================================================
# stringInArray
#=======================================================================================================================
stringInArray() {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 1; done
  return 0
}

#=======================================================================================================================
# BackupCustomEnvironmentVariablesOld
#=======================================================================================================================
BackupCustomEnvironmentVariables()
{
    $DOCKER_WEBAPI --exec api=SYNO.Docker.Container.Profile version=1 method=export outfile="$DOCKER_GITLAB_CONFIG_FILE" name="$GITLAB_NAME"
    if ! [ -s "$DOCKER_GITLAB_CONFIG_FILE" ]; then
      return 0
    fi

    env_ignore_file=$(cd `dirname $0` && pwd)/env_ignore
    declare -A env_ignore_variables; declare -a keys;  declare -a values;

    i=0
    while read line;
    do
        env_ignore_variables[$i]=$(echo "$line" | tr -d '\r')
        (( i++ ))
    done < $env_ignore_file

    # Rewrite File from new
    if [ -f "$DOCKER_GITLAB_CONFIG_CUSTOM" ]; then
        rm "$DOCKER_GITLAB_CONFIG_CUSTOM"
    fi

    i=0
    tmp_keys=$(jq '.env_variables[] | .key' <"$DOCKER_GITLAB_CONFIG_FILE" | tr -d '"')
    while read line
    do
        keys[$i]="$line"
        (( i++ ))
    done <<< "${tmp_keys[@]}"

    i=0
    tmp_values=$(jq '.env_variables[] | .value' <"$DOCKER_GITLAB_CONFIG_FILE" | tr -d '"')
    while read line
    do
        values[$i]="$line"
        (( i++ ))
    done <<< "${tmp_values[@]}"

    for i in "${!keys[@]}"
    do
        stringInArray "${keys[$i]}" "${env_ignore_variables[@]}"
        if [ $? == 0 ]; then
            echo "${keys[$i]}=${values[$i]}" >> "$DOCKER_GITLAB_CONFIG_CUSTOM"
        fi
    done

    rm $DOCKER_GITLAB_CONFIG_FILE
    return 1
}

#=======================================================================================================================
# RestoreCustomEnvironmentVariables
#=======================================================================================================================
RestoreCustomEnvironmentVariables()
{
    declare -a keys

    # if file exists and has a size greater than zero
    if ! [ -s $DOCKER_GITLAB_CONFIG_CUSTOM ]
    then
        return 0
    fi

    cp $GITLAB_PROFILE $GITLAB_PROFILE"_backup"
    chmod 0644 $GITLAB_PROFILE"_backup"

    i=0
    tmp_keys=$(jq '.env_variables[].key' <"$GITLAB_PROFILE" | tr -d '"')
    while read line
    do
        keys[$i]="$line"
        (( i++ ))
    done <<< "${tmp_keys[@]}"

    while read LINE;
    do
        key=$(echo $LINE | cut -f1 -d=)
        value=$(echo $LINE | cut -f2 -d=)
        value=$(echo "$value" | tr -d '\r') # trim \r on line-end
        stringInArray "$key" "${keys[@]}"
        if [ $? == 1 ]; then
            index=$(echo ${keys[@]/$key//} | cut -d/ -f1 | wc -w | tr -d ' ')
             #echo "$key:$value:$index"
            jq -c ".env_variables[$index].value=\"$value\""  <$GITLAB_PROFILE >$GITLAB_PROFILE".out" && mv $GITLAB_PROFILE".out" $GITLAB_PROFILE
        else
            jq -c ".env_variables += [{\"key\" : \"$key\", \"value\" : \"$value\"}]"  <$GITLAB_PROFILE >$GITLAB_PROFILE".out" && mv $GITLAB_PROFILE".out" $GITLAB_PROFILE
        fi
    done < $DOCKER_GITLAB_CONFIG_CUSTOM
}

#=======================================================================================================================
# BackupContainerPorts
#=======================================================================================================================
BackupContainerPorts()
{
    declare -a container_ports;  declare -a host_ports; declare -a types;

    $DOCKER_WEBAPI --exec api=SYNO.Docker.Container.Profile version=1 method=export outfile="$DOCKER_GITLAB_CONFIG_FILE" name="$GITLAB_NAME"
    if ! [ -s "$DOCKER_GITLAB_CONFIG_FILE" ]; then
      return 0
    fi

    # Rewrite File from new
    if [ -f "$DOCKER_GITLAB_CONFIG_CONTAINER_PORTS" ]; then
        rm "$DOCKER_GITLAB_CONFIG_CONTAINER_PORTS"
    fi

    i=0
    tmp_container_ports=$(jq '.port_bindings[].container_port' <"$DOCKER_GITLAB_CONFIG_FILE" | tr -d '"')
    while read line
    do
        container_ports[$i]="$line"
        (( i++ ))
    done <<< "${tmp_container_ports[@]}"

    i=0
    tmp_host_ports=$(jq '.port_bindings[].host_port' <"$DOCKER_GITLAB_CONFIG_FILE" | tr -d '"')
    while read line
    do
        host_ports[$i]="$line"
        (( i++ ))
    done <<< "${tmp_host_ports[@]}"

    i=0
    tmp_types=$(jq '.port_bindings[].type' <"$DOCKER_GITLAB_CONFIG_FILE" | tr -d '"')
    while read line
    do
        types[$i]="$line"
        (( i++ ))
    done <<< "${tmp_types[@]}"

    for i in "${!container_ports[@]}"
    do
        echo "${container_ports[$i]}:${host_ports[$i]}:${types[$i]}" >> "$DOCKER_GITLAB_CONFIG_CONTAINER_PORTS"
    done

    rm $DOCKER_GITLAB_CONFIG_FILE
    return 1
}

#=======================================================================================================================
# BackupContainerPorts
#=======================================================================================================================
RestoreContainerPorts()
{
    # if file exists and has a size greater than zero
    if ! [ -s $DOCKER_GITLAB_CONFIG_CONTAINER_PORTS ]
    then
        return 0
    fi

    cp $GITLAB_PROFILE $GITLAB_PROFILE"_backup_ports"
    chmod 0644 $GITLAB_PROFILE"_backup_ports"

    json_content=""
    while read LINE;
    do
        container_port=$(echo $LINE | cut -f1 -d: | tr -d '\r')
        host_port=$(echo $LINE | cut -f2 -d: | tr -d '\r')
        type=$(echo $LINE | cut -f3 -d: | tr -d '\r')
        json_content="$json_content{\"container_port\" : $container_port, \"host_port\" : \"$host_port\", \"type\" : \"$type\"},"
    done < $DOCKER_GITLAB_CONFIG_CONTAINER_PORTS

    jq -c ".port_bindings=[${json_content::-1}]" < $GITLAB_PROFILE > $GITLAB_PROFILE".out" && mv $GITLAB_PROFILE".out" $GITLAB_PROFILE
}

#=======================================================================================================================
# MariaDBFixRowFormat
#=======================================================================================================================
MariaDBFixRowFormat()
{

  ########################################################################################################################
  # DEFAULTS
  ########################################################################################################################
  local current_dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
  local MYSQL10_BIN_DIR="$(dirname -- "$MYSQL10_BIN")"
  local GITLAB_PACKAGE_CONTROL="$current_dir"/start-stop-status
  local PHPMYADMIN_PACKAGE_CONTROL=/var/packages/phpMyAdmin/scripts/start-stop-status
  local MARIADB10_PACKAGE_CONTROL=/var/packages/MariaDB10/scripts/start-stop-status
  local MARIADB10_CONFIG=/volume1/@appstore/MariaDB10/usr/local/mariadb10/etc/mysql/my.cnf

  local innodb_file_format
  local innodb_large_prefix
  local x

  # db exists?
  local RESULT=$($MYSQL10_BIN_DIR/mysqlshow --user=$DB_USER --password=$DB_PASS $DB_NAME | grep -v Wildcard | grep -o $DB_NAME)
  if ! [ "$RESULT" == "$DB_NAME" ]; then
      return 1
  fi

  ########################################################################################################################
  # STOP PACKAGES
  ########################################################################################################################
  x=$($GITLAB_PACKAGE_CONTROL stop 2> /dev/null)

  if [ -f $PHPMYADMIN_PACKAGE_CONTROL ]; then
    x=$($PHPMYADMIN_PACKAGE_CONTROL stop 2> /dev/null)
  fi

  if [ -f $MARIADB10_PACKAGE_CONTROL ]; then
    x=$($MARIADB10_PACKAGE_CONTROL stop 2> /dev/null)
  fi

  ########################################################################################################################
  # Modify MariaDB10 configuration
  ########################################################################################################################
  innodb_file_format=$(cat $MARIADB10_CONFIG | grep innodb_file_format)
  if [ -z "$innodb_file_format" ]; then
    sed -i '/innodb_file_per_table = 1/a innodb_file_format = barracuda' $MARIADB10_CONFIG
    echo "my.cnf set innodb_file_format = barracuda"
  fi

  innodb_large_prefix=$(cat $MARIADB10_CONFIG | grep innodb_large_prefix)
  if [ -z "$innodb_large_prefix" ]; then
    sed -i '/innodb_file_per_table = 1/a innodb_large_prefix = 1' $MARIADB10_CONFIG
    echo "my.cnf set innodb_large_prefix = 1"
  fi

  ########################################################################################################################
  # START PACKAGES
  ########################################################################################################################
  if [ -f $MARIADB10_PACKAGE_CONTROL ]; then
    x=$($MARIADB10_PACKAGE_CONTROL start 2> /dev/null)
  fi

  if [ -f $PHPMYADMIN_PACKAGE_CONTROL ]; then
    x=$($PHPMYADMIN_PACKAGE_CONTROL start 2> /dev/null)
  fi

  # GitLab package will start automatically

  ########################################################################################################################
  # modify tables
  ########################################################################################################################
  local CHARACTER_SET="utf8mb4" # default utf8
  local COLLATE="utf8mb4_unicode_ci" # default utf8_general_ci
  local ROW_FORMAT="DYNAMIC" # default COMPACT
  local tables=$($MYSQL10_BIN -u $DB_USER -p"$DB_PASS" -e "SELECT tbl.TABLE_NAME FROM information_schema.TABLES tbl WHERE tbl.TABLE_SCHEMA = '$DB_NAME' AND tbl.TABLE_TYPE='BASE TABLE'")

  for tableName in $tables; do
      if [[ "$tableName" != "TABLE_NAME" ]] ; then
          $MYSQL10_BIN -u $DB_USER -p"$DB_PASS" -e "ALTER TABLE $DB_NAME.$tableName DEFAULT CHARACTER SET $CHARACTER_SET COLLATE $COLLATE ROW_FORMAT = $ROW_FORMAT;"
          echo "$tableName - fix row format done"
      fi
  done

  return 0
}
